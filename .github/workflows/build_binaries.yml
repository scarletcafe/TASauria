name: Build TASauria binaries

on:
  push:
  pull_request:
    types: [ opened, edited ]
  workflow_dispatch:

jobs:
  build-bizhawk-plugin:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        bizhawk:
          - { HEAD: "master", DOTNET_VERSION: "8",       OLD_VERSION_BUILD: false, CACHEABLE: false, INCLUDE_COMMIT: true }
          - { HEAD: "2.10",   DOTNET_VERSION: "8",       OLD_VERSION_BUILD: false, CACHEABLE: true,  INCLUDE_COMMIT: false }
          - { HEAD: "2.9.1",  DOTNET_VERSION: "8",       OLD_VERSION_BUILD: false, CACHEABLE: true,  INCLUDE_COMMIT: false }
          - { HEAD: "2.9",    DOTNET_VERSION: "8",       OLD_VERSION_BUILD: true,  CACHEABLE: true,  INCLUDE_COMMIT: false }
          - { HEAD: "2.8",    DOTNET_VERSION: "8",       OLD_VERSION_BUILD: true,  CACHEABLE: true,  INCLUDE_COMMIT: false }
          - { HEAD: "2.7",    DOTNET_VERSION: "5.0.100", OLD_VERSION_BUILD: true,  CACHEABLE: true,  INCLUDE_COMMIT: false }
          - { HEAD: "2.6.3",  DOTNET_VERSION: "5.0.100", OLD_VERSION_BUILD: true,  CACHEABLE: true,  INCLUDE_COMMIT: false }
          - { HEAD: "2.6.2",  DOTNET_VERSION: "5.0.100", OLD_VERSION_BUILD: true,  CACHEABLE: true,  INCLUDE_COMMIT: false }
          - { HEAD: "2.6.1",  DOTNET_VERSION: "5.0.100", OLD_VERSION_BUILD: true,  CACHEABLE: true,  INCLUDE_COMMIT: false }
          - { HEAD: "2.6",    DOTNET_VERSION: "5.0.100", OLD_VERSION_BUILD: true,  CACHEABLE: true,  INCLUDE_COMMIT: false }
        target:
          - { BIZHAWK_TARGET: "Release", TASAURIA_TARGET: "Release" }
    name: "Build TASauria plugin for BizHawk ${{ matrix.bizhawk.HEAD }}"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Install .NET versions
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8
            ${{ matrix.bizhawk.DOTNET_VERSION }}

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - id: tasauria-checkout
        name: Get TASauria revision
        shell: bash
        env:
          IS_TAGGED_VERSION: ${{ (github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/')) && '1' || '' }}
        run: |
          export TASAURIA_REV="$(git rev-list --count HEAD).$(git rev-parse --short HEAD)"
          export TASAURIA_TAG="${GITHUB_REF##*/}"
          echo "TASAURIA_REV=${TASAURIA_REV}" >> $GITHUB_OUTPUT
          echo "TASAURIA_TAG=${TASAURIA_TAG}" >> $GITHUB_OUTPUT

          if [ -z "${IS_TAGGED_VERSION}" ]; then
            echo "TASAURIA_VERSION=rev${TASAURIA_REV}" >> $GITHUB_OUTPUT
          else
            echo "TASAURIA_VERSION=${TASAURIA_TAG}" >> $GITHUB_OUTPUT
          fi

      - id: bizhawk-checkout
        name: Checkout the appropriate BizHawk ref
        shell: bash
        env:
          BIZHAWK_HEAD: ${{ matrix.bizhawk.HEAD }}
          INCLUDE_COMMIT: ${{ matrix.bizhawk.INCLUDE_COMMIT && '1' || '' }}
        run: |
          cd BizHawk
          git checkout "${BIZHAWK_HEAD}"
          export BIZHAWK_REV="$(git rev-list --count HEAD).$(git rev-parse --short HEAD)"
          if [ -z "${INCLUDE_COMMIT}" ]; then
            export BIZHAWK_VERSION="${BIZHAWK_HEAD}";
          else
            export BIZHAWK_VERSION="${BIZHAWK_HEAD}.rev${BIZHAWK_REV}";
          fi
          echo "BIZHAWK_REV=${BIZHAWK_REV}" >> ${GITHUB_OUTPUT}
          echo "BIZHAWK_VERSION=${BIZHAWK_VERSION}" >> ${GITHUB_OUTPUT}
          cd ..

      - id: restore-bizhawk
        name: Restore BizHawk build
        if: ${{ matrix.bizhawk.CACHEABLE }}
        uses: actions/cache/restore@v4
        with:
          path:
            BizHawk/output
          key: ${{ runner.os }}-BizHawk-${{ matrix.bizhawk.HEAD }}-${{ matrix.target.BIZHAWK_TARGET }}

      - id: bizhawk-build
        name: Build BizHawk
        shell: pwsh
        if: ${{ !matrix.bizhawk.CACHEABLE || steps.restore-bizhawk.outputs.cache-hit != 'true' }}
        env:
          BIZHAWK_TARGET: ${{ matrix.target.BIZHAWK_TARGET }}
          OLD_VERSION_BUILD: ${{ matrix.bizhawk.OLD_VERSION_BUILD && '1' || '' }}
        run: |
          cd BizHawk
          git checkout --recurse-submodules
          if (-not [string]::IsNullOrEmpty($env:OLD_VERSION_BUILD)) {
            cd src/BizHawk.Version
            dotnet build -c "${env:BIZHAWK_TARGET}"
            cd ../..
          }
          # Emulate what Dist/BuildRelease.sh does but in a Windows-compatible way
          $BIZHAWK_VERSION="$(python ../.github/scripts/get_bizhawk_version.py)"
          $BIZHAWK_GIT_HASH="$(git rev-parse --verify HEAD)"
          dotnet build BizHawk.sln -c "${env:BIZHAWK_TARGET}" -m -clp:NoSummary -p:Version="${BIZHAWK_VERSION}" -p:SourceRevisionId="${BIZHAWK_GIT_HASH}"
          cd ..

      - id: save-bizhawk
        name: Save BizHawk build
        if: ${{ matrix.bizhawk.CACHEABLE && steps.restore-bizhawk.outputs.cache-hit != 'true' }}
        uses: actions/cache/save@v4
        with:
          path:
            BizHawk/output
          key: ${{ steps.restore-bizhawk.outputs.cache-primary-key }}

      - name: Build TASauria
        shell: pwsh
        env:
          TASAURIA_TARGET: ${{ matrix.target.TASAURIA_TARGET }}
          TASAURIA_VERSION: ${{ steps.tasauria-checkout.outputs.TASAURIA_VERSION }}
          BIZHAWK_VERSION: ${{ steps.bizhawk-checkout.outputs.BIZHAWK_VERSION }}
        run: |
          cd TASauriaPlugin
          $ADDITIONAL_BUILD_CONSTANTS="$(python ../.github/scripts/generate_bizhawk_version_constants.py)"
          dotnet build TASauriaPlugin.sln -c "${env:TASAURIA_TARGET}" -p:AdditionalBuildConstants="${ADDITIONAL_BUILD_CONSTANTS}" -p:TASauriaVersion="${env:TASAURIA_VERSION}" -p:TargetedBizHawkVersion="${env:BIZHAWK_VERSION}"
          cd ..

      - name: Bundle artifacts together
        shell: pwsh
        env:
          TASAURIA_VERSION: ${{ steps.tasauria-checkout.outputs.TASAURIA_VERSION }}
          BIZHAWK_VERSION: ${{ steps.bizhawk-checkout.outputs.BIZHAWK_VERSION }}
        run: |
          New-Item -ItemType Directory -Force -Path dist
          Compress-Archive -Path BizHawk/output/ExternalTools/* -DestinationPath dist/TASauriaPlugin.${env:TASAURIA_VERSION}_BizHawk.${env:BIZHAWK_VERSION}.zip

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: TASauriaPlugin.${{ steps.tasauria-checkout.outputs.TASAURIA_VERSION }}_BizHawk.${{ steps.bizhawk-checkout.outputs.BIZHAWK_VERSION }}
          path: dist/TASauriaPlugin.${{ steps.tasauria-checkout.outputs.TASAURIA_VERSION }}_BizHawk.${{ steps.bizhawk-checkout.outputs.BIZHAWK_VERSION }}.zip

  build-python-distributions:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python:
          - {version: '3.9'}
          - {version: '3.10'}
          - {version: '3.11'}
          - {version: '3.12'}
          - {version: '3.13'}
    name: "Build TASauria Python package for CPython ${{ matrix.python.version }}"
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python.version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python.version }}

    - id: tasauria-checkout
      name: Get TASauria revision
      shell: bash
      env:
        IS_TAGGED_VERSION: ${{ (github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/')) && '1' || '' }}
      run: |
        export TASAURIA_REV="$(git rev-list --count HEAD).$(git rev-parse --short HEAD)"
        export TASAURIA_TAG="${GITHUB_REF##*/}"
        echo "TASAURIA_REV=${TASAURIA_REV}" >> $GITHUB_OUTPUT
        echo "TASAURIA_TAG=${TASAURIA_TAG}" >> $GITHUB_OUTPUT

        if [ -z "${IS_TAGGED_VERSION}" ]; then
          echo "TASAURIA_VERSION=rev${TASAURIA_REV}" >> $GITHUB_OUTPUT
        else
          echo "TASAURIA_VERSION=${TASAURIA_TAG}" >> $GITHUB_OUTPUT
        fi

    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip setuptools wheel

        pip install -U -r requirements.txt

        pip install -U ruff

    - name: Lint repository
      shell: bash
      run: |
        ruff check ./tasauria

    - name: Create distributions and install wheel
      shell: bash
      run: |
        export tag_name="${GITHUB_REF##*/}"

        # Substitute README assets with direct GitHub links
        sed -i'.original' -e "s/src=\".github\/assets/src=\"https:\/\/raw.githubusercontent.com\/scarletcafe\/TASauria\/$(git rev-parse HEAD)\/.github\/assets/g" README.md
        rm -f README.md.original

        python ./setup.py sdist bdist_wheel

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: tasauria_${{ steps.tasauria-checkout.outputs.TASAURIA_VERSION }}_python_${{ matrix.python.version }}
        path: dist/*

  upload_release:
    needs: [ build-python-distributions ]
    runs-on: ubuntu-latest
    environment: publish
    permissions:
      # Required to create release
      contents: write
      # Required for OIDC
      id-token: write
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'  # Watch as I let this get handled as a float again

      - name: Install dependencies
        shell: bash
        run: |
          sudo apt-get update && sudo apt-get install -y hub
          python -m pip install --upgrade pip setuptools wheel
          export tag_name="${GITHUB_REF##*/}"
          pip install -U "."
          pip install -U jinja2

      - name: Download Python artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: tasauria_*_python_3.13
          merge-multiple: true
          path: dist

      - name: Download plugin artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: TASauriaPlugin.*
          merge-multiple: true
          path: dist

      - name: Publish wheels as release artifacts on GitHub
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -x
          export tag_name="${GITHUB_REF##*/}"
          python .github/scripts/create_dist_summary.py
          assets=()
          for asset in ./dist/*.{whl,tar.gz,zip}; do
            assets+=("-a" "$asset")
          done
          tag_name="${GITHUB_REF##*/}"
          hub release create "${assets[@]}" -F .github/outputs/DIST_SUMMARY.md "$tag_name"
          rm .github/outputs/*.md

      - name: Publish packages to PyPI
        uses: pypa/gh-action-pypi-publish@v1.13.0
